// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  NEW
  PENDING
  COMPLETED
  CANCELED
}


model User {
  id Int @id @default(autoincrement())
  userId String @unique
  slugUrl String @unique
  username String
  avatar String? 
  dateCreateAccount DateTime?
  register Boolean @default(false)
  reports Int @default(0)
  warnings Int @default(0)
  limitApiKey Int @default(2)
  trustScore Int @default(100)
  notificationApi Boolean @default(false)
  emailVerified Boolean @default(false)
  permission String @default("user")
  template Templates[]
  notification Notification[]
  api Api[]
  order Order[]
}

model Notification {
  id Int @id @default(autoincrement())
  type String
  title String
  description String
  dateAdd DateTime @default(now())
  userId String
  user User @relation(fields: [userId], references: [userId])
}

model Api {
  id Int @id @default(autoincrement())
  apiKeyId String @unique
  secretKey String @unique
  name String
  dateCreate DateTime @default(now())
  status Boolean @default(true)
  reqCount Int @default(0)
  successCount Int @default(0)
  errorCount Int @default(0)
  lastUsed DateTime?
  monthlyCount Int @default(0)
  monthlyLimit Int @default(20000)
  dailyCount Int @default(0)
  dailyLimit Int @default(500)
  userId String
  webhook Webhook[]
  user User @relation(fields: [userId], references: [userId])
}

model Order {
  Id Int @id @default(autoincrement())
  orderCode String @unique
  dateCreate DateTime @default(now())
  status OrderStatus @default(NEW)
  offer String
  userId String
  orderAmount Int @default(0)
  orderPaymentLink String
  user User @relation(fields: [userId], references: [userId])
  events OrderEvent[]
}

model OrderEvent {
  Id Int @id @default(autoincrement())
  orderCode String 
  status OrderStatus
  date DateTime @default(now())
  order Order @relation(fields: [orderCode], references: [orderCode])
}

model Webhook {
  id Int @id @default(autoincrement())
  webhookUrl String
  type String
  color Int
  title String
  description String
  apiKeyId String
  api Api @relation(fields: [apiKeyId], references: [apiKeyId])
}

model Templates {
  id Int @id @default(autoincrement())
  templateId String @unique
  link String @unique
  slugUrl String @unique
  categories String
  dateCreate String
  dateCreateSystem DateTime @default(now())
  title String
  sourceServerId String?
  description String?
  usageCount Int
  authorId String?
  visitHistory VisitTemplateHistory[]
  author User? @relation(fields: [authorId], references: [userId])

  @@index([usageCount])
  @@index([dateCreateSystem])
}

model VisitTemplateHistory {
  id Int @id @default(autoincrement())
  uuid String 
  slugUrl String
  date DateTime @default(now())
  url Templates @relation(fields: [slugUrl], references: [slugUrl])

  @@index([slugUrl])
}


model SearchHistory {
  id Int @id @default(autoincrement())
  title String
  dateSearch DateTime @default(now())
}

model PromoCode {
  id Int @id @default(autoincrement())
  code String @unique
  usageCount Int @default(0)
  maxUsageCount Int @default(1)
  discount Int @default(0)
  expiredDate DateTime
}