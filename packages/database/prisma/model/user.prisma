model User {
  userId            String         @id @unique
  slugUrl           String         @unique
  email             String?        @unique
  username          String
  avatar            String?
  dateCreateAccount DateTime?
  register          Boolean        @default(false)
  reports           Int            @default(0)
  warnings          Int            @default(0)
  limitApiKey       Int            @default(2)
  trustScore        Int            @default(100)
  walletBalance     Int            @default(0)
  builderAiUsage    Int            @default(0)
  builderAiLimit    Int            @default(3)
  notificationApi   Boolean        @default(false)
  emailVerified     Boolean        @default(false)
  notification      Notification[]
  api               Api[]
  order             Order[]
  chat              Chat[]
  transaction       Transaction[]
  cart              CartItem[]
  roles             Roles[]
  offers            Offer[]
  settings          Settings?
  builder           Builder[]

  addedTemplates  Templates[] @relation("AddedTemplates")
  authorTemplates Templates[] @relation("AuthorTemplates")
}

model Settings {
  id              Int     @id @default(autoincrement())
  userId          String  @unique
  templatesDetail Boolean @default(false)
  monitoring      Boolean @default(false)
  user            User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model Roles {
  id     Int           @id @default(autoincrement())
  value  RolesPossible @default(USER)
  userId String
  user   User          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, value])
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  title       String
  description String
  createdAt   DateTime         @default(now())
  isRead      Boolean          @default(false)
  userId      String
  user        User             @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}
